package org.apache.spark.sql.catalyst.plans.logical;
public  class CoGroup<Key extends java.lang.Object, Left extends java.lang.Object, Right extends java.lang.Object, Result extends java.lang.Object> extends org.apache.spark.sql.catalyst.plans.logical.BinaryNode implements scala.Product, scala.Serializable {
  static public <Key extends java.lang.Object, Left extends java.lang.Object, Right extends java.lang.Object, Result extends java.lang.Object> org.apache.spark.sql.catalyst.plans.logical.CoGroup<Key, Left, Right, Result> apply (scala.Function3<Key, scala.collection.Iterator<Left>, scala.collection.Iterator<Right>, scala.collection.TraversableOnce<Result>> func, org.apache.spark.sql.catalyst.encoders.ExpressionEncoder<Key> keyEnc, org.apache.spark.sql.catalyst.encoders.ExpressionEncoder<Left> leftEnc, org.apache.spark.sql.catalyst.encoders.ExpressionEncoder<Right> rightEnc, scala.collection.Seq<org.apache.spark.sql.catalyst.expressions.Attribute> leftGroup, scala.collection.Seq<org.apache.spark.sql.catalyst.expressions.Attribute> rightGroup, org.apache.spark.sql.catalyst.plans.logical.LogicalPlan left, org.apache.spark.sql.catalyst.plans.logical.LogicalPlan right, org.apache.spark.sql.Encoder<Result> evidence$3) { throw new RuntimeException(); }
  public  scala.Function3<Key, scala.collection.Iterator<Left>, scala.collection.Iterator<Right>, scala.collection.TraversableOnce<Result>> func () { throw new RuntimeException(); }
  public  org.apache.spark.sql.catalyst.encoders.ExpressionEncoder<Key> keyEnc () { throw new RuntimeException(); }
  public  org.apache.spark.sql.catalyst.encoders.ExpressionEncoder<Left> leftEnc () { throw new RuntimeException(); }
  public  org.apache.spark.sql.catalyst.encoders.ExpressionEncoder<Right> rightEnc () { throw new RuntimeException(); }
  public  org.apache.spark.sql.catalyst.encoders.ExpressionEncoder<Result> resultEnc () { throw new RuntimeException(); }
  public  scala.collection.Seq<org.apache.spark.sql.catalyst.expressions.Attribute> output () { throw new RuntimeException(); }
  public  scala.collection.Seq<org.apache.spark.sql.catalyst.expressions.Attribute> leftGroup () { throw new RuntimeException(); }
  public  scala.collection.Seq<org.apache.spark.sql.catalyst.expressions.Attribute> rightGroup () { throw new RuntimeException(); }
  public  org.apache.spark.sql.catalyst.plans.logical.LogicalPlan left () { throw new RuntimeException(); }
  public  org.apache.spark.sql.catalyst.plans.logical.LogicalPlan right () { throw new RuntimeException(); }
  // not preceding
  public   CoGroup (scala.Function3<Key, scala.collection.Iterator<Left>, scala.collection.Iterator<Right>, scala.collection.TraversableOnce<Result>> func, org.apache.spark.sql.catalyst.encoders.ExpressionEncoder<Key> keyEnc, org.apache.spark.sql.catalyst.encoders.ExpressionEncoder<Left> leftEnc, org.apache.spark.sql.catalyst.encoders.ExpressionEncoder<Right> rightEnc, org.apache.spark.sql.catalyst.encoders.ExpressionEncoder<Result> resultEnc, scala.collection.Seq<org.apache.spark.sql.catalyst.expressions.Attribute> output, scala.collection.Seq<org.apache.spark.sql.catalyst.expressions.Attribute> leftGroup, scala.collection.Seq<org.apache.spark.sql.catalyst.expressions.Attribute> rightGroup, org.apache.spark.sql.catalyst.plans.logical.LogicalPlan left, org.apache.spark.sql.catalyst.plans.logical.LogicalPlan right) { throw new RuntimeException(); }
  public  org.apache.spark.sql.catalyst.expressions.AttributeSet missingInput () { throw new RuntimeException(); }
}
